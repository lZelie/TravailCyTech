[
["index.html", "Analyse exploratoire des données - Cycle ingénieur 1ère année 1 Introduction 1.1 Terminologie générale 1.2 Typologie des variables 1.3 Conversion entre les différents types de variables", " Analyse exploratoire des données - Cycle ingénieur 1ère année Astrid Jourdan, Karima El Ganaoui, Romain Dujol 2020 – 2021 1 Introduction L’analyse exploratoire de données est un ensemble de méthodes scientifiques qui permettent de décrire un corpus de données de la manière la plus synthétique possible notamment à l’aide de représentations graphiques appropriées et de résumés numériques. Nous allons illustrer les concepts présentés à l’aide du logiciel R et de l’environnement de développement intégré RStudio. 1.1 Terminologie générale Le corpus de données étudié s’appuie sur un ensemble d’objets équivalents, appelés individus, sur lesquels on observe les mêmes caractéristiques. L’ensemble des individus est appelé population. Le corpus étudié peut être tout ou partie de la population : on parle de recensement lorsque le corpus est constitué de l’entièreté de la population ; sinon, on parle de sondage ou d’échantillonage de la population. 1.1.1 Contextes Les données peuvent provenir de deux types de contexte. Dans une étude, on effectue des observations de groupes existants pour étudier les éventuelles corrélations. Dans une expérimentation, on crée les groupes afin d’exprimer d’éventuelles causalités. 1.1.2 Échantillonages On peut identifier plusieurs niveaux d’échantillonage. Dans un échantillonage aléatoire, on prend au hasard des individus. Dans un échantillonage stratifié, on divise la population en classes puis on prend au hasard des individus dans toutes les classes. Dans un échantillonage partitionné, on divise la population en classes puis on prend au hasard des classes dans leur entièreté. Dans un échantillonage multi-étage, on combine les deux stratégies précédentes : on divise la population en classes, puis on prend des classes au hasard, puis on prend au hasard des individus dans ces classes. 1.2 Typologie des variables Une variable (ou un caractère) est une caractéristique d’un individu de la population liée au corpus de données. On distingue deux grands types de variables : les variables quantitatives et les variables qualitatives. 1.2.1 Variables quantitatives Définition 1.1 Une variable est dite quantitative si elle peut être modélisée par des valeurs numériques cohérentes avec les opérations arithmétiques usuelles. Une variable quantitative est dite continue si et seulement si elle admet un ensemble non dénombrable de valeurs possibles. Dans le cas contraire, une telle variable quantitative est dite discrète. Exemple 1.1 La taille, le poids et l’âge sont généralement des variables quantitatives continues. Le nombre de descendants est une variable quantitative discrète. 1.2.2 Variables qualitatives Définition 1.2 Une variable est dite qualitative si elle n’est pas quantitative. Une variable qualitative est dite ordinale si et seulement si elle l’ensemble de ses valeurs possibles peut être ordonné naturellement. Dans le cas contraire, une telle variable qualitative est dite nominale. Remarque. Un cas particulier de variable qualitative nominale est la variable dite dichotomique ne possédant que deux valeurs possibles. Elle est généralement utilisée pour modéliser l’absence ou la présence d’un attribut. Exemple 1.2 Un niveau d’accord par rapport à une proposition est généralement une variable qualitative ordinale. Une catégorie socio-professionnelle est généralement une variable qualitative nominale. En R : Acquérir des données Le corpus de données sera souvent sous forme d’un tableau à double entrée : chaque ligne représente un indvidu ; chaque colonne représente une variable. Les formats usuels des fichiers de données sont : des fichiers issus de tableurs (comme Microsoft Excel, LibreOffice Calc, …) ; des fichiers au format CSV (Comma-Separated Values) qui décrivent un tableau à double entrée sous format texte. Dans le cas des fichiers CSV, on utilise la fonction read.table pour récupérer les données : header spécifie si la première ligne du fichier contient la description des variables (aussi appelé en-tête) ; sep spécifie le séparateur utilisé entre deux valeurs ; dec spécifie le séparateur décimal utilisé pour les valeurs numériques. data &lt;- read.table(&quot;exemple.csv&quot;, header = TRUE, sep = &quot;;&quot;, dec = &quot;,&quot;) Dans RStudio, le tableau de données data est alors ajouté à l’environnement. Il est possible de le visualiser en cliquant dessus ou en tapant dans la console View(data). La fonction str fournit une description rapide des données. str(data) &#39;data.frame&#39;: 30 obs. of 5 variables: $ Continue : num -1.59 -4.12 1.81 0.12 8 -4.56 -6.01 -5.77 -2.79 9.23 ... $ Discrète : int 13 9 NA 10 6 7 8 6 4 NA ... $ Ordinale : int 4 1 4 1 3 4 3 1 3 3 ... $ Nominale : Factor w/ 3 levels &quot;Bleu&quot;,&quot;Rouge&quot;,..: 1 2 3 1 1 2 2 1 2 1 ... $ Dichotomique: Factor w/ 2 levels &quot;Non&quot;,&quot;Oui&quot;: 2 1 1 2 2 1 1 2 2 1 ... Elle fournit notamment les informations suivantes : le nombre d’individus ; le nombre de variables ; pour chacune des variables : le type de variable : num pour une variable quantitative avec des valeurs non entières ; int pour une variable quantitative discrète à valeurs entières ; Ord.factor pour une variable qualitative ordinale avec le nombre de valeurs possibles (levels) ; Factor pour une variable qualitative nominale avec le nombre de valeurs possibles (levels) ; les valeurs issus des premiers individus. Remarque. Dans l’exemple précédent, la variable Discrète contient des valeurs NA pour Not Available : cela signifie que la valeur de la variable pour l’individu correspondant est manquante. 1.3 Conversion entre les différents types de variables On constate une graduation dans la richesse d’information en fonction du type de variable. On peut en effet classer les différents types de varible présentés de la plus riche à la moins riche : variable quantitative continue variable quantitative discrète variable qualitative ordinale variable qualitative nominale Dans le but de simplifier la représentaton d’une variable, celle-ci peut être transformée en un type moins riche. Toutefois, cette simplification entraîne nécessairement une perte d’information. Proposition 1.1 Soit \\(X\\) une variable. Si \\(X\\) est une variable quantitative continue alors \\(\\lfloor X\\rfloor\\) est une variable quantitative discrète où \\(\\lfloor\\cdot\\rfloor\\) désigne la fonction partie entière. Si \\(X\\) est une variable quantative discrète finie alors elle est qualitative ordinale par identification. Si \\(X\\) est une variable qualitative ordinale alors elle est nominale par identification, si on “oublie” l’ordre induit. Remarque. Si \\(X\\) est une variable quantitative, on peut la transformer en une variable qualitative ordinale par regroupement par intervalles. Exemple 1.3 Soit \\(X\\) la variable représentant l’âge d’une personne en années : il s’agit de manière naturelle d’une variable quantitative (continue ou discrète en fonction de la granularité recherchée). Alors on peut considérer la variable qualitative ordinale \\(Y\\) représentant la classe d’âge : on pose \\(Y = \\text{jeune}\\) si \\(X \\in [0, 25[\\) on pose \\(Y = \\text{adulte}\\) si \\(X \\in [25, 59[\\) on pose \\(Y = \\text{senior}\\) si \\(X \\in [60, +\\infty[\\) En R : Transformer une variable en une variable nominale Dans l’exemple précédent, la variable Ordinale est identifiée comme une variable quantitative discrète (int). Pour forcer R à la reconnaître comme une variable qualitative, on utilise la fonction as.factor : data$Ordinale &lt;- as.factor(data$Ordinale) str(data) &#39;data.frame&#39;: 30 obs. of 5 variables: $ Continue : num -1.59 -4.12 1.81 0.12 8 -4.56 -6.01 -5.77 -2.79 9.23 ... $ Discrète : int 13 9 NA 10 6 7 8 6 4 NA ... $ Ordinale : Factor w/ 4 levels &quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;: 4 1 4 1 3 4 3 1 3 3 ... $ Nominale : Factor w/ 3 levels &quot;Bleu&quot;,&quot;Rouge&quot;,..: 1 2 3 1 1 2 2 1 2 1 ... $ Dichotomique: Factor w/ 2 levels &quot;Non&quot;,&quot;Oui&quot;: 2 1 1 2 2 1 1 2 2 1 ... La variable Ordinale est à présent reconnue comme une variable qualitative. En R : Transformer une variable en une variable qualitative ordinale Dans l’exemple précédent, la variable qualitative Ordinale ne définit pas d’ordre particulier. Pour forcer R à définir un ordre, on utilise la fonction as.ordered : data$Ordinale &lt;- as.ordered(data$Ordinale) str(data) &#39;data.frame&#39;: 30 obs. of 5 variables: $ Continue : num -1.59 -4.12 1.81 0.12 8 -4.56 -6.01 -5.77 -2.79 9.23 ... $ Discrète : int 13 9 NA 10 6 7 8 6 4 NA ... $ Ordinale : Ord.factor w/ 4 levels &quot;1&quot;&lt;&quot;2&quot;&lt;&quot;3&quot;&lt;&quot;4&quot;: 4 1 4 1 3 4 3 1 3 3 ... $ Nominale : Factor w/ 3 levels &quot;Bleu&quot;,&quot;Rouge&quot;,..: 1 2 3 1 1 2 2 1 2 1 ... $ Dichotomique: Factor w/ 2 levels &quot;Non&quot;,&quot;Oui&quot;: 2 1 1 2 2 1 1 2 2 1 ... La variable Ordinale est à présent reconnue comme une variable qualitative ordinale. Remarque. Dans cet exemple, on peut appliquer as.ordered directement sur la variable quantitative, c’est-à-dire sans appliquer as.factor. En R : Transformer une variable quantative en variable qualitative par regroupement par intervalle Dans l’exemple précédent, on souhaite regrouper les valeurs la variable quantitative Continue dans les intervalles suivants : \\(]-\\infty, -5[\\), \\([-5, 0[\\), \\([0, 5[\\) et \\([5, +\\infty[\\). On utilise la fonction cut : breaks spécifie les bornes des intervalles utilisés pour le regroupement ; right spécifie si la forme des intervalles : right = TRUE indique que les intervalles seront de la forme \\([a, b[\\) ; right = FALSE indique que les intervalles seront de la forme \\(]a,b]\\) (c’est le cas par défaut) ; labels spécifie les valeurs à donner dans la nouvelle variable ; ordered_result spécifie si la variable qualitative obtenue doit être ordinale ou non. data$Intervalles &lt;- cut(data$Continue, breaks = c(-Inf, -5, 0, 5, +Inf), right = TRUE, labels = c(&quot;Très bas&quot;, &quot;Bas&quot;, &quot;Haut&quot;, &quot;Très haut&quot;), ordered_result = TRUE) str(data) &#39;data.frame&#39;: 30 obs. of 6 variables: $ Continue : num -1.59 -4.12 1.81 0.12 8 -4.56 -6.01 -5.77 -2.79 9.23 ... $ Discrète : int 13 9 NA 10 6 7 8 6 4 NA ... $ Ordinale : Ord.factor w/ 4 levels &quot;1&quot;&lt;&quot;2&quot;&lt;&quot;3&quot;&lt;&quot;4&quot;: 4 1 4 1 3 4 3 1 3 3 ... $ Nominale : Factor w/ 3 levels &quot;Bleu&quot;,&quot;Rouge&quot;,..: 1 2 3 1 1 2 2 1 2 1 ... $ Dichotomique: Factor w/ 2 levels &quot;Non&quot;,&quot;Oui&quot;: 2 1 1 2 2 1 1 2 2 1 ... $ Intervalles : Ord.factor w/ 4 levels &quot;Très bas&quot;&lt;&quot;Bas&quot;&lt;..: 2 2 3 3 4 2 1 1 2 4 ... Remarque. On choisit ici de garder la variable de départ. On peut choisir de la remplacer : data$Continue &lt;- cut(data$Continue, ...) "]
]
